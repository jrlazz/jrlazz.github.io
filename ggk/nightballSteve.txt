<!DOCTYPE html>
<html lang="en">
<head>
<title>nightballSteve.html</title>
<meta charset="utf-8">
<link rel="shortcut icon" href="https://threejs.org/files/favicon.ico"/>

<style type="text/css">
body {margin:0;padding:0;overflow:hidden;background-color:#000;color:#ff0;font-family:Lucida Console;}
span{position:absolute;left:200px;top:20px;font-size:10pt;}
</style>

<script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
<script type="importmap">{"imports":{"three":"https://unpkg.com/three@0.156.0/build/three.module.js","three/addons/":"https://unpkg.com/three@0.156.0/examples/jsm/"}}</script>

</head>

<body>

<!--
<span id="sp" style="left:10px;top:5px;">right click &rarr; inspect</span>
-->
<a href="nightballSteve.txt" target="_blank" style="position:absolute;left:10px;top:10px;font-size:10pt;color:#0ff;text-decoration:none;">source code</a>

<script type="module">

import * as THREE from 'three';
import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { MTLLoader } from 'three/addons/loaders/MTLLoader.js';
import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';

var camera,scene,renderer,manager,controls,cube,sphere,mat,matcube,earth,matearth,amb,point,tex,color,sub;
var w=0;
var ww=0;
var q=0;
var num=290;
var zi=[];for(let z=1;z<num;z++){zi[z]=Math.random()*300;}
var st=[];

var altera=0;
var BDs,BDi,BEs,BEi,PDs,PDi,PEs,PEi,CA,TR,mo,cox;
var rot=[];
var group=new THREE.Group();
var groupCATR=new THREE.Group();
var groupPD=new THREE.Group();
var groupPE=new THREE.Group();
var groupBD=new THREE.Group();
var groupBE=new THREE.Group();

function init(){

	renderer=new THREE.WebGLRenderer({antialias:true});
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize(window.innerWidth,window.innerHeight);

	document.body.appendChild(renderer.domElement);

	scene=new THREE.Scene();

	camera=new THREE.PerspectiveCamera(90,window.innerWidth/window.innerHeight,1,1000);

	camera.position.set(0,0,80);

	//scene.rotation.set(0.5,0,0);

	manager=new THREE.LoadingManager();
	manager.onStart=function(url,itemsLoaded,itemsTotal){console.log('Started loading file:'+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal + ' files.' );};
	manager.onLoad=function(){console.log('Loading complete!');};
	manager.onProgress=function(url,itemsLoaded,itemsTotal){console.log('loading texture'+url+' '+(itemsLoaded/itemsTotal*100)+'%');};
	manager.onError=function(url){console.log('Error loading texture:'+url);};


	amb=new THREE.AmbientLight("#fff",3);
	//scene.add(amb);

	point=new THREE.PointLight(0xffcc00,500);
	point.position.set(0,30,60);
	//scene.add(point);

	matcube=new THREE.MeshStandardMaterial({color:'#fff'});

	tex=new THREE.TextureLoader().load("img/rgbmapS.png");
	tex.wrapS=THREE.RepeatWrapping;
	tex.wrapT=THREE.RepeatWrapping;
	tex.repeat.set(3,1);

	earth=new THREE.TextureLoader().load("img/earth_800.jpg");

	mat=new THREE.MeshStandardMaterial({map:tex});
	
	sphere=new THREE.Mesh(new THREE.SphereGeometry(5,16,16),mat);
	sphere.position.set(0,0,0);
	sphere.rotation.set(0,0,1.57);
	scene.add(sphere);

	cube=new THREE.Mesh(new THREE.SphereGeometry(0.3,16,16),matcube);
	cube.position.set(20,20,-400);
	scene.add(cube);

	for(let z=1;z<num;z++){st[z]=cube.clone();st[z].position.set(0,-5,100);scene.add(st[z]);}//Math.random()*200

	scene.remove(st[30]);
	st[30]=new THREE.Mesh(new THREE.SphereGeometry(5,16,16),new THREE.MeshStandardMaterial({color:'#f00'}));
	st[30].position.set(-120,-5,100);
	scene.add(st[30]);

	scene.remove(st[31]);
	st[31]=new THREE.Mesh(new THREE.SphereGeometry(7,16,16),new THREE.MeshStandardMaterial({color:'#0ff'}));
	st[31].position.set(120,-5,100);
	scene.add(st[31]);

	scene.remove(st[32]);
	st[32]=new THREE.Mesh(new THREE.SphereGeometry(9,16,16),new THREE.MeshStandardMaterial({map:earth}));
	st[32].position.set(120,-5,1500);
	scene.add(st[32]);

	scene.remove(st[34]);

	var loader=new GLTFLoader(manager);
	loader.load('models/extras/saturn.glb',function(gltf){
		st[33]=gltf.scene;
		//st[33].traverse(function(node){if(node.isMesh){node.material=mat;}});
		//st[33].traverse(function(child){if(child.isMesh){child.material.color.set('#f00');}
		st[33].position.set(-120,-5,1500);
		st[33].scale.set(4,4,4);
		scene.add(st[33]);
	});


	mo="models/steve/partes.mtl";
	cox="models/steve/vivicox.obj";
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load('models/steve/steve_ca.obj',function(object){CA=object;},manager.onProgress,manager.onError);});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load('models/steve/steve_to.obj',function(object){TR=object;},manager.onProgress,manager.onError);});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){BDs=object;},manager.onProgress,manager.onError);});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){BDi=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){BEs=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){BEi=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){PDs=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){PDi=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){PEs=object;});});
	new MTLLoader(manager).load(mo,function(mat){mat.preload();new OBJLoader(manager).setMaterials(mat).load(cox, function(object){PEi=object;});});


	window.addEventListener('resize',onWindowResized);
}

function get_random_color(){
	color="";
	for(let i=0;i<3;i++){
       		sub=Math.floor(Math.random()*256).toString(16);
       		color +=(sub.length==1?"0"+sub:sub);
    	}
    	return "#"+color;
}

function onWindowResized() {
	renderer.setSize(window.innerWidth,window.innerHeight);
	camera.aspect=window.innerWidth/window.innerHeight;
	camera.updateProjectionMatrix();
}

function animate(){
	requestAnimationFrame(animate);


// Steve
	if(altera==0){setTimeout(function(){alterando();},2000);}
	if(altera>0){
		if(groupPD.rotation.x> 1.07){rot[1]=1;PEi.rotation.x=0;}
		if(groupPD.rotation.x<-1.07){rot[1]=0;PDi.rotation.x=0;}
			if(rot[1]==0){
				group.rotation.z +=0.01;
				groupPD.rotation.x +=0.1;
				groupPE.rotation.x -=0.1;
				groupBD.rotation.x -=0.1;
				groupBE.rotation.x +=0.1;
					CA.rotation.y -=0.025;
					TR.rotation.x +=0.01;
						BDi.rotation.x -=0.025;
						BEi.rotation.x +=0.025;
						PDi.rotation.x +=0.01;
						PEi.rotation.x -=0.01;

			}else{
				group.rotation.z -=0.01;
				groupPD.rotation.x -=0.1;
				groupPE.rotation.x +=0.1;
				groupBD.rotation.x +=0.1;
				groupBE.rotation.x -=0.1;
					CA.rotation.y +=0.025;
					TR.rotation.x -=0.01;
						BDi.rotation.x +=0.025;
						BEi.rotation.x -=0.025;
					PDi.rotation.x -=0.01;
					PEi.rotation.x +=0.01;
			}
	}

	sphere.rotation.x -=0.15;

	w++;

	st[32].rotation.y +=0.03;
	st[33].rotation.y +=0.02;
	st[34].rotation.x +=0.02;st[34].rotation.z +=0.02;st[34].rotation.y +=0.02;

	if(w==30){scene.add(amb);scene.add(point);}

	for(let z=1;z<num;z++){qq(z);};

	renderer.render(scene,camera);
}

function qq(q){
	st[q].position.z +=1;if(q==30){st[q].position.z +=2;}if(q==31 || q==32 || q==33 || q==34){st[q].position.z +=3;}
	if(st[q].position.z>zi[q]){
		st[q].position.z=-200;st[q].position.y=-80+Math.random()*160;st[q].position.x=-300+Math.random()*600;
		if(q==30){st[q].position.z=-1000;st[30].material.color.set(get_random_color());}
		if(q==31){st[q].position.z=-1000;st[31].material.color.set(get_random_color());}
		if(q==32){st[q].position.z=-1500;}
		if(q==33){st[q].position.z=-1500;}
		if(q==34){st[q].position.z=-1500;}
	}
}

function alterando(){
	CA.position.set(0,2.1,0); // steve_ca
	TR.position.set(0,2  ,0); // steve_to
	BDs.position.set(-1.75,1  ,0); // steve_bd
	BDi.position.set(-1.75,-0.5,0); // steve_bd
	BEs.position.set( 1.75,   1,0); // steve_be
	BEi.position.set( 1.75,-0.5,0); // steve_be
	PDs.position.set(0.025,   0,0); // vivicox
	PDi.position.set(0.125,-1.5,0); // vivicox
	PEs.position.set(0.56, 0,0); // vivicox
	PEi.position.set(0.56,-1.5,0); // vivicox
	BDs.scale.y=0.5;
	BEs.scale.y=0.5;
	BDi.scale.set(1,0.75,1);
	BEi.scale.set(1,0.75,1);
	PDs.scale.y=0.5;
	PEs.scale.y=0.5;
	PDi.scale.set(0.8,0.8,0.8);
	PEi.scale.set(0.8,0.8,0.8);
	groupCATR.add(CA);groupCATR.add(TR);
	groupPD.add(PDs);groupPD.add(PDi);
	groupPE.add(PEs);groupPE.add(PEi);
	groupBD.add(BDs);groupBD.add(BDi);
	groupBE.add(BEs);groupBE.add(BEi);
	group.add(groupCATR);
	group.add(groupPD);
	group.add(groupPE);
	group.add(groupBD);
	group.add(groupBE);
	group.scale.set(2,2,2);
	groupCATR.position.set( 0,4,0);
	groupPD.position.set(-0.6,3,0);
	groupPE.position.set( 0.0,3,0);
	groupBD.position.set( 0.0,5,0);
	groupBE.position.set( 0.0,5,0);
	//group.rotation.y=Math.PI;
	group.rotation.x=1;
	group.position.set(0,5.5,0);
	scene.add(group);
	st[34]=group.clone();st[34].position.set(-12,-5,1500);st[34].scale.set(10,10,10);scene.add(st[34]);
	altera++;
}

init();
animate();


/*

Ball rolling in space

Prohibited for under 70s :smile:

The link:

*/


</script>
</body>
</html>
