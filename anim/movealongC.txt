<!DOCTYPE html>
<html lang="en">
<head>
<title>movealongC.html</title>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"/>
<link rel="shortcut icon" href="../ok.ico">

<style>
body{margin:0;background-color:#000;font-family:Monospace;font-size:9pt;color:#cff;overflow:hidden;}
</style>

<script type="importmap">
	{
	  "imports": {
		"three": "https://unpkg.com/three@0.171.0/build/three.module.min.js",
		"three/addons/": "https://unpkg.com/three@0.171.0/examples/jsm/"
	  }
	}
</script>
</head>

<body>

<img id="bi" src="img/monark_azul_4.jpg" style="position:absolute;left:10px;top:15px;width:200px;opacity:0.5;border:2px solid #0ff;cursor:pointer;"></img>
<span style="position:absolute;left:34px;top:2px;color:#0ff;opacity:0.8;">60&#39;s Light Blue Monark</span>
<span style="position:absolute;left:32px;top:145px;color:#0ff;opacity:0.8;">You may click on image</span>
<a href="movealongC.txt" target="_blank" class="bu" style="position:absolute;left:80%;top:10px;width:200px;background-color:#066;color:#0ff;text-align:center;text-decoration:none;border:2px outset #0cc;">View code</a>

<script type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
//import Stats from 'three/addons/libs/stats.module.js';
import { Flow } from 'three/addons/modifiers/CurveModifier.js';
import { STLLoader } from 'three/addons/loaders/STLLoader.js';

const ACTION_SELECT=1, ACTION_NONE=0;
const curveHandles=[];
const mouse=new THREE.Vector2();

var stats;
var scene,camera,renderer,loader,geometry,material,controls,geo,mat,action=ACTION_NONE;
var flow=[];
var somePoints,curve,objectToCurve;
var sim=0,pim=0;
var k=0.0322,kk=0.0322;

var woo=[], g=[], l=[], m=[], s=[], ss=[], f=[];
var pts, curve, points, line, light; 
var gro=[];for(let z=1;z<300;z++){gro[z]=new THREE.Group();}
var PP=Math.PI*2;
var v=1;
var dbi=document.getElementById("bi");

	dbi.onclick=function BI(){v=1-v;}

	scene=new THREE.Scene();

	camera=new THREE.PerspectiveCamera(40,window.innerWidth/window.innerHeight,1,1000);
	camera.position.set(3,2,3);
	//camera.position.set(0,0,3);
	camera.lookAt( scene.position );

	somePoints=[
		new THREE.Vector3(-1.4, 0.33,0),
		new THREE.Vector3(-1.6,    0,0),
		new THREE.Vector3(-1.4,-0.33,0),
			new THREE.Vector3(0,-0.6,0),
		new THREE.Vector3(2.04,-0.6,0),
		new THREE.Vector3(2.4,    0,0),
		new THREE.Vector3(2.04, 0.6,0),
			new THREE.Vector3(0,0.6,0),
	];

	pts=new THREE.Points(new THREE.BufferGeometry().setFromPoints(somePoints),new THREE.PointsMaterial({color:'#f00',size:0.1}));
	scene.add(pts);

	curve=new THREE.CatmullRomCurve3(somePoints);
	curve.curveType='centripetal';
	curve.closed=true;

	points=curve.getPoints(80);
	line=new THREE.LineLoop(
		new THREE.BufferGeometry().setFromPoints(points),
		new THREE.LineBasicMaterial({color:'#fff'})
	);

	scene.add( line );

	l[1]=new THREE.AmbientLight('#fff',5);
	scene.add(l[1]);
	l[2]=new THREE.PointLight('#fff',2000);
	l[2].position.set(-10,5,-25);
	scene.add(l[2]);

// ******** ******** Axes
	g[1]=new THREE.CylinderGeometry(0.04,0.04,0.3);
	m[1]=new THREE.MeshStandardMaterial({color:'#933',metalness:0.9,roughness:0.2});
	s[1]=new THREE.Mesh(g[1],m[1]);
	s[1].rotation.set(Math.PI/2,0,0);
	s[1].position.set(-1.25,0,0);
	scene.add(s[1]);
		s[2]=s[1].clone();
		s[2].scale.set(2,1,2);
		s[2].position.set(1.72,0,0);
		scene.add(s[2]);

// ******** ******** Gears
	g[20]=new THREE.SphereGeometry(0.25,32,32,0,Math.PI*2,0.2,0.9);
	g[20].translate(0,0.1,0);
	m[20]=new THREE.MeshStandardMaterial({color:'#0f0',side:THREE.DoubleSide});
	s[20]=new THREE.Mesh(g[20],m[20]);
	s[20].scale.set(0.17,1,0.02);
	let a=0;
	let fi=16;
	for(let z=1;z<fi;z++){
		a=a+PP/(fi-1);
		s[z]=s[20].clone();
		s[z].rotation.set(0,0,a);
		gro[2].add(s[z]);
	}
	gro[2].position.set(-1.25,0,0);
	gro[2].rotation.z=0.1;
	scene.add(gro[2]);

	g[21]=new THREE.SphereGeometry(0.25,32,32,0,Math.PI*2,0.3,1);
	g[21].translate(0,0.1,0);
	m[21]=new THREE.MeshStandardMaterial({color:'#0f0',side:THREE.DoubleSide});
	s[21]=new THREE.Mesh(g[21],m[21]);
	s[21].scale.set(0.17,2.1,0.2);
	a=0;
	fi=31;
	for(let z=1;z<fi;z++){
		a=a+PP/(fi-1);
		s[z]=s[21].clone();
		s[z].rotation.set(0,0,a);
		gro[3].add(s[z]);
	}
	gro[3].position.set(1.7,0,0);
	scene.add(gro[3]);

// ******** ******** Back Gear extras
	g[41]=new THREE.RingGeometry(0.195,0.28,32);
	m[41]=new THREE.MeshStandardMaterial({color:'#066',side:THREE.DoubleSide});
	s[41]=new THREE.Mesh(g[41],m[41]);
	s[41].position.set(-1.25,0,0.02);
	scene.add(s[41]);
		s[42]=s[41].clone();
		s[42].position.set(-1.25,0,-0.02);
		scene.add(s[42]);

	g[50]=new THREE.SphereGeometry(0.02,32,32);
	g[50].translate(0,0.18,0);
	m[50]=new THREE.MeshStandardMaterial({color:'#096',side:THREE.DoubleSide});
	s[20]=new THREE.Mesh(g[50],m[50]);
	a=0;
	fi=23;
	for(let z=1;z<fi;z++){
		a=a+PP/(fi-1);
		s[z]=s[20].clone();
		s[z].rotation.set(0,0,a);
		gro[5].add(s[z]);
	}
	gro[5].position.set(-1.25,0,0);
	scene.add(gro[5]);

	g[43]=new THREE.CylinderGeometry(0.63,0.63,0.1);
	m[43]=new THREE.MeshStandardMaterial({color:'#066'});
	s[43]=new THREE.Mesh(g[43],m[43]);
	s[43].rotation.set(Math.PI/2,0,0);
	s[43].position.set(1.7,0,0);
	scene.add(s[43]);

	s[44]=s[43].clone();
	s[44].scale.set(0.26,1,0.26);
	s[44].position.set(-1.25,0,0);
	scene.add(s[44]);

// ******** ******** STLs
	loader=new STLLoader();
	loader.load( 'models/extras/chainC.stl',function(geometry){
		geometry.scale(0.015,0.015,0.015)
		material=new THREE.MeshStandardMaterial({color:'#900'});
		objectToCurve=new THREE.Mesh(geometry,material);
		for(let z=1;z<62;z=z+2){
			flow[z]=new Flow(objectToCurve);
			flow[z].updateCurve(0,curve);
			scene.add(flow[z].object3D);
			flow[z].moveAlongCurve(0.016+k);
			k=k+kk;
		}
	} );
	loader.load('models/extras/chainB.stl',function(geometry){
		geometry.scale(0.015,0.015,0.015)
		material=new THREE.MeshStandardMaterial({color:'#336'});
		geo=geometry.clone();
		mat=material.clone();
		objectToCurve=new THREE.Mesh(geo,mat);
		k=kk;
		for(let z=2;z<63;z=z+2){
			flow[z]=new Flow(objectToCurve);
			flow[z].updateCurve(0,curve);
			scene.add(flow[z].object3D);
			flow[z].moveAlongCurve(k);
			k=k+kk;
		}
	});
	loader.load('models/extras/chainD.stl',function(geometry){
		geometry.scale(0.015,0.015,0.015)
		material=new THREE.MeshStandardMaterial({color:'#090'});
		geo=geometry.clone();
		mat=material.clone();
		objectToCurve=new THREE.Mesh(geo,mat);
		k=kk;
		for(let z=64;z<125;z=z+2){
			flow[z]=new Flow(objectToCurve);
			flow[z].updateCurve(0,curve);
			scene.add(flow[z].object3D);
			flow[z].moveAlongCurve(0.016+k);
			k=k+kk;
		}
	});
	
// ******** ********

	renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});
	renderer.setClearColor(0x222222,0);
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize( window.innerWidth,window.innerHeight);
	document.body.appendChild(renderer.domElement);
	window.addEventListener('resize',onWindowResize);
	controls=new OrbitControls(camera,renderer.domElement);

function onWindowResize(){
	camera.aspect=window.innerWidth/window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth,window.innerHeight);
}

function animate(){
	requestAnimationFrame(animate);
if(v==1){
	if(flow[1] && flow[2] && flow[64]){
		for(let z=1;z<62;z=z+2){flow[z].moveAlongCurve(-0.0005);}
		for(let z=2;z<63;z=z+2){flow[z].moveAlongCurve(-0.0005);}
		for(let z=64;z<125;z=z+2){flow[z].moveAlongCurve(-0.0005);}
	}
	if(gro[2] && gro[3]){gro[2].rotation.z -=0.013;gro[3].rotation.z -=0.0065;}
	if(gro[5]){gro[5].rotation.z +=0.00325;}
}else{
	if(flow[1] && flow[2] && flow[64]){
		for(let z=1;z<62;z=z+2){flow[z].moveAlongCurve(-0.002);}
		for(let z=2;z<63;z=z+2){flow[z].moveAlongCurve(-0.002);}
		for(let z=64;z<125;z=z+2){flow[z].moveAlongCurve(-0.002);}
	}
	if(gro[2] && gro[3]){gro[2].rotation.z -=0.052;gro[3].rotation.z -=0.026}
	if(gro[5]){gro[5].rotation.z +=0.013;}
}	

	renderer.render(scene,camera);
}


animate();

</script>

</body>
</html>
