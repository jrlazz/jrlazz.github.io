<!DOCTYPE html>
<html lang="en">
<head>
<title>prome01.html</title>
<meta charset="utf-8">
<link rel="shortcut icon" href="ok.ico"/>

<style>
body,
html {
  margin: 0%;
  padding: 0%;
}

         
 #slider-container {
    width: 100%;
    height: 50px;
    position: absolute;
    bottom: 0;
    background-color: cyan;
    display: flex;
    align-items: center;
 }


 #slider {
    width: 30%;
    height: 100%;
    margin: auto;
    /* appearance: none; */
    /* outline: none; */
 }
 
 
 
#canvasTwoDIV {
  position: absolute;
  top: 10px;
  right: 30px;

  width: 600px;
  height: 400px;

  background-color: blue;
  color: white;
  
  display: none;
}


#detailsCanvas {
  position: absolute;
  top: 50px;
  left: 50px;
  width: 500px;
  height: 300px;
  background-color: black;
}


#instruct {
  position: absolute;
  top: 10px;
  left: 10px;
  background-color: black;
  color: white;
  padding: 5px;
}
</style>

<script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>

<script type="importmap">
	{
		"imports":{
			"three":"https://unpkg.com/three@0.158.0/build/three.module.js",
			"three/addons/":"https://unpkg.com/three@0.158.0/examples/jsm/"
		}
	}
</script>

</head>

<body>

<div id="slider-container">
   <input type="range" min="-450" max="450" value="0" class="slider" id="slider">
</div>

<span>Cors test</span>

<button style="position:absolute;left:84%;top:84%;background-color:#ccc;text-align:center;"><a id="code" href="prome01.txt" target="_blank" style="color:#000;text-decoration:none;font-size:16pt;">The Code</a></button>

<script type="module">

import * as THREE from "three";
import { OrbitControls } from "three/addons/controls/OrbitControls.js";

let container;
let camera, scene, renderer, rayCaster, controls;
let objectsForRayCasterArray = [];
let mouseX, mouseY;
var mousePositionVector = new THREE.Vector2();


let planesArray = [];




init();
animate();




function init() {
  console.log(" --In 'init()'!");
  
  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.set(50, 50, 400);

  scene = new THREE.Scene();
  scene.background = new THREE.Color( "blue" );

  rayCaster = new THREE.Raycaster();

  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( window.innerWidth, window.innerHeight );
  renderer.outputEncoding = THREE.LinearsRGBEncoding;
  document.body.appendChild( renderer.domElement );

  controls = new OrbitControls( camera, renderer.domElement );


  const light1 = new THREE.DirectionalLight( 0xefefff, 1.5 );
  light1.position.set( 1, 1, 1 ).normalize();
  scene.add( light1 );

  /* const light2 = new THREE.DirectionalLight( 0xffefef, 1.5 );
  light2.position.set( - 1, - 1, - 1 ).normalize(); */
  /* scene.add( light2 ); */
  

  window.addEventListener( 'resize', onWindowResize );
  /* window.addEventListener("pointerdown", onPointerDown, false); */
  //window.addEventListener("mousemove", onMouseMove, false);
  
  
  planesArray = [];

}


function makeImagePlane(imageName, zCoordinate) {
  console.log("Making a plane for: ", imageName);
  // 1. Create a TextureLoader to load the image file:
  var imageLoader = new THREE.TextureLoader();

  // 2. Load an image file into a custom material:
  var imageMaterial = new THREE.MeshBasicMaterial({
     map: imageLoader.load(imageName),
     side: THREE.DoubleSide,
     transparent: true,
     opacity: 0.85,
     color: 0xe6ffff
  });

  // 3. Create a PlaneGeometry for the image:
  var planeGeometry = new THREE.PlaneGeometry(400, 160);

  // 4. Create the MESH using the Geometry + Material:
  var planeMesh = new THREE.Mesh(planeGeometry, imageMaterial);

  // 5. Set the MESH's (x, y, z) position:
  planeMesh.position.set(0, 0, zCoordinate)

  // 6. Add the MESH to the Scene:
  scene.add(planeMesh);

  // 7. Add this new image-plane to the "planesArray":
  planesArray.push(planeMesh);
}




makeImagePlane("https://raw.githubusercontent.com/jrlazz/img/main/John.jpg", 0);
makeImagePlane("https://raw.githubusercontent.com/jrlazz/img/main/Paul.jpg", -50);
makeImagePlane("https://raw.githubusercontent.com/jrlazz/img/main/George.jpg", 50);
makeImagePlane("https://raw.githubusercontent.com/jrlazz/img/main/Ringo.jpg", 100);


/* console.log("\n\n>planesArray[0] = ", planesArray[0].geometry); */


  
//////////////////////////////////
// 
//     >>> SLIDER STUFF <<<
//
//
const theSlider = document.getElementById("slider");

theSlider.addEventListener("input", () => {
  const sliderValue = theSlider.value;
  // const newPosition = (sliderValue - 50) * 2;
  console.log("  >'sliderValue' = ", sliderValue);

  let mesh1 = planesArray[1];
  mesh1.position.z = sliderValue;

  let mesh2 = planesArray[2];
  // if(mesh2.position.z != 1)
     mesh2.position.z = sliderValue * -1;

  let mesh3 = planesArray[3];
  mesh3.position.z = (sliderValue * -1) + 50;
  console.log("  >'mesh3.position.z' = ", mesh3.position.z);


  render();

  // imageContainer.style.transform = `translateX(${newPosition}px)`;

  // const newPosition2 = (value - 40) * 2;
  // imageContainer2.style.transform = `translateX(${newPosition2}px)`;

  // const newPosition3 = 900 - ((value - 20) * 2);
  // imageContainer3.style.transform = `translateX(${newPosition3}px)`;

});







function generateRandomColor() {
    const colorsArray = ["blue", "red", "green", "yellow", "purple", "orange", "violet", "thistle", "coral", "darkorange", "pink", "deeppink", "fuchsia", "lightblue", "blueviolet", "crimson", "dodgerblue"];
    
    // Randomly pick a COLOR from the colorsArray:
    let randy = Math.floor(Math.random() * colorsArray.length);
    let colorString = colorsArray[randy];
    console.log("colorString = " + colorString);

    return colorString;
}






function buildHelperGrid() {
  var gridColor = new THREE.Color("skyblue");
  let helperGrid = new THREE.GridHelper(600, 120, "yellow", gridColor);
  //helperGrid.setColors( new THREE.Color(0xff0000), new THREE.Color(0xffffff) );
  scene.add(helperGrid);

  helperGrid.position.set(0, 0, 0);
  helperGrid.visible = true;
  // helperGrid.visible = !helperGrid.visible;
}


buildHelperGrid();



function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize( window.innerWidth, window.innerHeight );
}

//

function animate() {
	/* console.log("animating!"); */
  requestAnimationFrame( animate );
    
  render();
}



function render() {
  /* 	theta += 0.1;
  const time = Date.now(); */
  renderer.render( scene, camera );
}




</script>

</body>

</html>
