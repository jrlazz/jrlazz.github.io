<!DOCTYPE html>
<html lang="en">
<head>
<title>image_on_sphere.html</title>
<meta charset="utf-8">
<link rel="shortcut icon" href="ok.ico"/>
<style>
body{overflow:hidden;margin:0px;font-family:Arial;background-color:#048;}
button {position:absolute;left:20px;top:40px;width:30px;font-family:Arial;font-size:18pt;font-weight:bold;color:red;border-radius:2%;cursor:pointer}
</style>

</head>

<script type="importmap">
	{
		"imports":{
			"three":"https://unpkg.com/three@0.164.0/build/three.module.min.js",
			"three/addons/":"https://unpkg.com/three@0.164.0/examples/jsm/"
		}
	}
</script>

<body>

<span id="spa" style="position:absolute;left:40%;top:35%;font-size:82pt;color:#069;display:''"></span>
<span id="spb" style="position:absolute;left:33%;top:3%;width:33%;font-size:20.5px;color:#c90;text-align:center;display:''">Mapping an image onto a sphere in Three.js</span>

<button style="left:84%;top:3%;width:120px;background-color:#ccc;text-align:center;"><a id="code" href="image_on_sphere.txt" target="_blank" style="color:#f00;text-decoration:none;font-size:16pt;">The Code</a></button>


<script id="vertex_shader" type="x-shader/x-vertex">
	varying vec3 vNormal;
	void main() {
		vNormal = normal;
		gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
	}
</script>

<script id="fragment_shader" type="x-shader/x-fragment">
	uniform sampler2D tex;
	varying vec3 vNormal;
	void main() {
   		vec2 uv = normalize( vNormal ).xy * 0.5 + 0.5;
		vec3 color = texture2D( tex, uv ).rgb;
		if ( vNormal.z < - 0.85 ) color = vec3( 0.777, 0.74, 0.74 ); // back of eye
		gl_FragColor = vec4( color, 1.0 );
}
</script>

<script type="module">

import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

var camera, scene, renderer, loader, controls, luz, texture, geo, mat, mesh, uniforms;
var sim=0;

function init(){

	camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,1,1000);
	camera.position.set(0,0,100);
	scene=new THREE.Scene();

	renderer=new THREE.WebGLRenderer({antialias:true});
	renderer.setSize(window.innerWidth,window.innerHeight);
	document.body.appendChild(renderer.domElement);
	renderer.setClearColor('#048',1.0);

	controls=new OrbitControls(camera,renderer.domElement);

	window.addEventListener('resize',onWindowResize,false);

	luz=new THREE.AmbientLight("#fff",5);scene.add(luz);

	texture=new THREE.TextureLoader().load('img/1174r.jpg');

	uniforms = {
		"tex": { value: texture }   
	};
	mat=new THREE.ShaderMaterial( {
		uniforms        : uniforms,
		vertexShader    : document.getElementById( 'vertex_shader' ).textContent,
		fragmentShader  : document.getElementById( 'fragment_shader' ).textContent
	} );
	
	geo=new THREE.SphereGeometry(30,32,16);
	mesh=new THREE.Mesh(geo,mat);
}

function onWindowResize(){
	camera.aspect=window.innerWidth/window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth,window.innerHeight);
}

function animate() {
	requestAnimationFrame(animate);
	if(sim==0 && texture && uniforms && mesh){scene.add(mesh);sim=1}
	renderer.render(scene,camera);
}

init();
animate();

</script>
</body>
</html>